name: Deploy App FastApi

on:
  - push
  - pull_request
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
  
      - name: Get Short GitHub SHA and Save in Environment Variable
        run: echo "SHORT_GITHUB_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
  
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_GITHUB_SHA . 
          echo "Docker image built successfully."
      
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "Docker image pushed successfully."
  
  deploy_prod:
    name: deploy_prod
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: 
      name: production
      url: http://final-project.devops-fairy.cloudns.biz/
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Helm Setup
        uses: koslib/helm-eks-action@master
        with:
          command: |
            aws eks update-kubeconfig --region ${{ vars.AWS_DEFAULT_REGION }} --name ${{ vars.EKS_CLUSTER_NAME }} --kubeconfig ./kubeconfig
            echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
            echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            kubectl config set-context arn:aws:eks:${{ vars.AWS_DEFAULT_REGION }}:${{ secrets.AWS_ACCOUNT }}:cluster/${{ vars.EKS_CLUSTER_NAME }}
            
      - name: Add Helm Repository
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm repo update

      - name: Install cert-manager CRDs
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.2/cert-manager.crds.yaml

      - name: Install cert-manager
        run: |
          helm install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            # Uncomment later if we would like to have namespaces, as it is a good practice to have namespaces for different apps/components
            #--create-namespace \
            --version v1.14.2
            # Uncomment the line below if you want to install CRDs as part of the Helm release
            # --set installCRDs=true

      - name: Clone Helm Charts
        run: |
          git clone https://github.com/FastAndTraefik/fastapi-docker-traefik.git

      - name: Helm Deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            cd fastapi-docker-traefik
            helm upgrade --install --values=./yaml-files/fastapi-app-chart/values.yaml prod ./yaml-files/fastapi-app-chart --debug
name: Deploy App FastApi

on:
  - push
  - pull_request
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
  
      - name: Get Short GitHub SHA and Save in Environment Variable
        run: echo "SHORT_GITHUB_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
  
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_GITHUB_SHA . 
          echo "Docker image built successfully."
      
          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "Docker image pushed successfully."
  
  deploy_prod:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    environment: 
      name: production
      url: http://final-project.devops-fairy.cloudns.biz/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      ### Terraform ###
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.3

      - name: Terraform Formatting
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ./cluster
        run: terraform init -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME_TF }}" -backend-config="key=${{ secrets.AWS_BUCKET_KEY_NAME_TF_STATE }}" -backend-config="region=${{ vars.AWS_DEFAULT_REGION }}"

      - name: Terraform Validate
        id: validate
        working-directory: ./cluster
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./cluster
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      # TODO: This cannot be used yet as the tf state is not correctly
      # saved in the S3 bucket
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      # - name: Terraform Apply
      #   working-directory: ./cluster
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false

      - name: Helm Setup
        uses: koslib/helm-eks-action@master
        with:
          command: |
            aws eks update-kubeconfig --region ${{ vars.AWS_DEFAULT_REGION }} --name ${{ vars.EKS_CLUSTER_NAME }} --kubeconfig ./kubeconfig
            echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
            echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            kubectl config set-context arn:aws:eks:${{ vars.AWS_DEFAULT_REGION }}:${{ secrets.AWS_ACCOUNT }}:cluster/${{ vars.EKS_CLUSTER_NAME }}

      - name: Helm Deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            echo "${{ env.KUBE_CONFIG_DATA }}" | base64 --decode
            helm upgrade --install --values=./yaml-files/fastapi-app-chart/values.yaml prod ./yaml-files/fastapi-app-chart --debug
